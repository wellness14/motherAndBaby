var Format = {
	money: function (a)
	{
		return isNaN(Number(a)) ? a : Number(
			a).toLocaleString().replace(/\.0+$/,
			"")
	},
	date: function (a)
	{
		var b = DateFormat.toDate(a.substring(
			0, 8));
		return DateFormat.toDot(DateFormat.toStr(
			b))
	},
	reserveKind: function (a)
	{
		if (a == "RESERVE_FOR_CORRECT")
		{
			return "+"
		}
		if (a == "SUBTRACT_FOR_CORRECT")
		{
			return "-"
		}
		return ""
	}
};
$(function ()
{
	$("a.link_utility").on("click",
		function ()
		{
			$(this).parent().toggleClass(
				"opt_open");
			return false
		});
	$.views.helpers(
	{
		formatDate: Format.date
	});
	$.views.helpers(
	{
		formatMoney: Format.money
	});
	$.views.helpers(
	{
		formatReserveKind: Format.reserveKind
	})
});
Date.prototype.yyyymmdd = function ()
{
	var c = this.getFullYear().toString();
	var b = (this.getMonth() + 1).toString();
	var a = this.getDate().toString();
	return c + (b[1] ? b : "0" + b[0]) + (
		a[1] ? a : "0" + a[0])
};
Date.prototype.yyyymmddhhmmss =
	function ()
	{
		var f = this.getFullYear().toString();
		var e = (this.getMonth() + 1).toString();
		var a = this.getDate().toString();
		var d = this.getHours().toString();
		var b = this.getMinutes().toString();
		var c = this.getSeconds().toString();
		return f + (e[1] ? e : "0" + e[0]) +
			(a[1] ? a : "0" + a[0]) + (d[1] ? d :
			"0" + d[0]) + (b[1] ? b : "0" + b[0]) +
			(c[1] ? c : "0" + c[0])
};
var MultiCalendar = function (g, d, c)
{
	var f = $("input[name='startDt']", c);
	var b = $("input[name='endDt']", c);
	var a = $("select[name='monthrange']",
		c);
	var e = $("select[name='dayrange']", c);
	new DaySelector(g, f, b, e);
	new MonthSelector(d, f, b, a);
	$("input[name='periodType']").on(
		"change", function ()
		{
			$(d).addClass("hide");
			$(g).addClass("hide");
			if ($(this).val() == "DAILY")
			{
				a.hide();
				e.prop("selectedIndex", 0).change()
					.show()
			}
			else
			{
				e.hide();
				a.prop("selectedIndex", 0).change()
					.show()
			}
		})
};
var DaySelector = function (a, k, g, b)
{
	var h = $(a);
	var f = $(".cal_container", h);
	var l = new DayCalendar(f, "시작일");
	var c = new DayCalendar(f, "종료일");
	var e = null;
	if (b.find("option[selected]").length ==
		0 && k.val().length == 8)
	{
		i(k.val(), g.val())
	}
	b.on("change", function ()
	{
		var o = $(this).val();
		if (/\d+\|\d/.test(o))
		{
			var n = o.split("|");
			m(n[0], n[1]);
			j()
		}
		else
		{
			l.setDate(DateFormat.toDate(k.val()));
			c.setDate(DateFormat.toDate(g.val()));
			d()
		}
	});
	$(".btn_reset button").on("click",
		function ()
		{
			b.prop("selectedIndex", "0").change();
			j()
		});
	$(".btn_confirm button", h).on("click",
		function ()
		{
			var p = DateFormat.toStr(l.getDate());
			var o = DateFormat.toStr(c.getDate());
			var n = DateFormat.toStr(new Date());
			if (o > n || p > n)
			{
				alert("검색기간이 오늘보다 이후일 수 없습니다.");
				return false
			}
			if (p > o)
			{
				alert(
					"검색 시작일이 검색 종료일보다 이후일 수 없습니다.");
				return false
			}
			i(p, o);
			j()
		});

	function d()
	{
		h.removeClass("hide")
	}

	function j()
	{
		h.addClass("hide")
	}

	function m(o, n)
	{
		k.val(o);
		g.val(n)
	}

	function i(o, n)
	{
		if (e)
		{
			$(e).remove()
		}
		e = $('<option value="' + o + "|" + n +
			'">사용자선택: ' + DateFormat.toDot(o) +
			" ~ " + DateFormat.toDot(n) +
			"</option>");
		b.find("option").filter(":last").before(
			e);
		b.prop("selectedIndex", b.find(
			"option").length - 2).change()
	}
};
var MonthSelector = function (h, l, g,
	a)
{
	var i = $(h);
	var f = $(".cal_container", i);
	var c = new MonthCalendar(f, "시작월");
	var b = new MonthCalendar(f, "종료월");
	var e = null;
	if (a.find("option[selected]").length ==
		0 && l.val().length == 6)
	{
		j(l.val(), g.val())
	}
	a.on("change", function ()
	{
		var o = $(this).val();
		if (/\d+\|\d/.test(o))
		{
			var n = o.split("|");
			m(n[0], n[1]);
			k()
		}
		else
		{
			c.setDate(DateFormat.toDate(l.val()));
			b.setDate(DateFormat.toDate(g.val()));
			d()
		}
	});
	$(".btn_reset button").on("click",
		function ()
		{
			a.prop("selectedIndex", "0").change();
			k()
		});
	$(".btn_confirm button", i).on("click",
		function ()
		{
			var p = DateFormat.toStr(c.getDate())
				.substr(0, 6);
			var o = DateFormat.toStr(b.getDate())
				.substr(0, 6);
			var n = DateFormat.toStr(new Date())
				.substr(0, 6);
			if (o > n || p > n)
			{
				alert("검색기간이 이번달보다 이후일 수 없습니다.");
				return false
			}
			if (p > o)
			{
				alert(
					"검색 시작월이 검색 종료월보다 이후일 수 없습니다.");
				return false
			}
			k();
			j(p, o)
		});

	function d()
	{
		i.removeClass("hide")
	}

	function k()
	{
		i.addClass("hide")
	}

	function m(o, n)
	{
		l.val(o.substr(0, 6));
		g.val(n.substr(0, 6))
	}

	function j(o, n)
	{
		if (e)
		{
			$(e).remove()
		}
		e = $('<option value="' + o + "|" + n +
			'">사용자선택: ' + DateFormat.toDot(o) +
			" ~ " + DateFormat.toDot(n) +
			"</option>");
		a.find("option").filter(":last").before(
			e);
		a.prop("selectedIndex", a.find(
			"option").length - 2).change()
	}
};
var DayCalendar = function (b, c)
{
	this.date = null;
	this.showYear = 0;
	this.showMonth = 0;
	var a = $("#dayCalendarTemplate").render(
	{
		days: ["일", "월", "화", "수", "목", "금",
			"토"
		],
		title: c
	});
	this.container = $(a).appendTo(b);
	this.initEvent();
	this.setDate(new Date())
};
DayCalendar.prototype = {
	initEvent: function ()
	{
		var a = this;
		$(".btn_prev", this.container).on(
			"click", function ()
			{
				a.moveMonth(-1)
			});
		$(".btn_next", this.container).on(
			"click", function ()
			{
				a.moveMonth(1)
			});
		$(".btn_day", this.container).on(
			"click", function ()
			{
				var b = $(this).text();
				if (b)
				{
					a.setDate(new Date(a.showYear, a.showMonth,
						b), true)
				}
				return false
			})
	},
	getDate: function ()
	{
		return this.date
	},
	setDate: function (a, b)
	{
		this.date = a;
		this.showYear = this.date.getFullYear();
		this.showMonth = this.date.getMonth();
		this.render(b)
	},
	moveMonth: function (a)
	{
		var b = new Date(this.showYear, this.showMonth +
			a, 1);
		this.showYear = b.getFullYear();
		this.showMonth = b.getMonth();
		this.render()
	},
	markSelectedDay: function ()
	{
		var c = (this.showYear == this.date.getFullYear());
		var a = (this.showMonth == this.date.getMonth());
		var b = this.date.getDate();
		if (c && a)
		{
			$(".btn_day", this.container).filter(
				function (d, e)
				{
					return $(e).text() == b
				}).parent().addClass("on")
		}
	},
	markToday: function ()
	{
		var c = (new Date().getFullYear() ==
			this.showYear);
		var a = (new Date().getMonth() ==
			this.showMonth);
		var b = (new Date()).getDate();
		if (c && a)
		{
			$(".btn_day", this.container).filter(
				function (d, e)
				{
					return $(e).text() == b
				}).parent().addClass("day_today")
		}
	},
	render: function (d)
	{
		$(this.container).find(".view_date").text(
			this.showYear + "." + (this.showMonth -
				0 + 1));
		var a = new Date(this.showYear, this.showMonth,
			1).getDay();
		var e = new Date(this.showYear, this.showMonth -
			0 + 1, 0).getDate();
		if (!d)
		{
			$(".btn_day", this.container).text(
				"");
			var c = $(this.container).find(
				".btn_day");
			for (var b = a; b < a + e; b++)
			{
				c.eq(b).text(b - a + 1)
			}
		}
		$(".btn_day", this.container).parent()
			.removeClass("day_today").removeClass(
				"on", "day_today");
		this.markToday();
		this.markSelectedDay()
	}
};
var MonthCalendar = function (a)
{
	this.date = null;
	this.showYear = 0;
	var c = $.templates(
		"#monthCalendarTemplate");
	var b = c.render(
	{
		month: [1, 2, 3, 4, 5, 6, 7, 8, 9,
			10, 11, 12
		]
	});
	this.container = $(b).appendTo(a);
	this.initEvent();
	this.setDate(new Date())
};
MonthCalendar.prototype = {
	initEvent: function ()
	{
		var a = this;
		$(".btn_prev", this.container).on(
			"click", function ()
			{
				a.moveYear(-1)
			});
		$(".btn_next", this.container).on(
			"click", function ()
			{
				a.moveYear(1)
			});
		$(".btn_month", this.container).on(
			"click", function ()
			{
				var b = parseInt($(this).text()) -
					1;
				a.setDate(new Date(a.showYear, b, 1));
				return false
			})
	},
	getDate: function ()
	{
		return this.date
	},
	setDate: function (a)
	{
		this.date = a;
		this.showYear = this.date.getFullYear();
		this.render()
	},
	moveYear: function (a)
	{
		this.showYear -= -a;
		this.render()
	},
	markThisMonth: function ()
	{
		$(".calendar_month li", this.container)
			.removeClass("month_current");
		if (new Date().getFullYear() == this.showYear)
		{
			$(".calendar_month li", this.container)
				.eq(new Date().getMonth()).addClass(
					"month_current")
		}
	},
	markSelectedMonth: function ()
	{
		$(".calendar_month li", this.container)
			.removeClass("on");
		if (this.date.getFullYear() == this.showYear)
		{
			$(".calendar_month li", this.container)
				.eq(this.date.getMonth()).addClass(
					"on")
		}
	},
	render: function ()
	{
		$(this.container).find(".view_date").text(
			this.showYear);
		this.markThisMonth();
		this.markSelectedMonth()
	}
};
var DateFormat = {
	toDate: function (a)
	{
		if (/\d{8}/.test(a))
		{
			return new Date(a.substr(0, 4), a.substr(
				4, 2) - 1, a.substr(6, 2))
		}
		else
		{
			if (/\d{6}/.test(a))
			{
				return new Date(a.substr(0, 4), a.substr(
					4, 2) - 1, 1)
			}
			else
			{
				return new Date()
			}
		}
	},
	toStr: function (b)
	{
		var c = (b.getMonth() | 0) + 1;
		c = (c < 10 ? "0" : "") + c;
		var a = b.getDate();
		a = (a < 10 ? "0" : "") + a;
		return b.getFullYear() + c + a
	},
	toDot: function (a)
	{
		if (/\d{8}/.test(a))
		{
			return a.substr(0, 4) + "." + a.substr(
				4, 2) + "." + a.substr(6, 2)
		}
		else
		{
			if (/\d{6}/.test(a))
			{
				return a.substr(0, 4) + "." + a.substr(
					4, 2)
			}
		}
	}
};
var viewScript = function (a, c)
{
	var b = $("#copy-button");
	$("#script_popup").popup(
	{
		beforeopen: function ()
		{
			$.ajax(
			{
				type: "GET",
				url: "/ad/adunit/script",
				data: "adUnitId=" + a,
				success: function (d)
				{
					if (c != 401 && c != 402)
					{
						$(".btn_guide").hide()
					}
					else
					{
						$(".btn_guide").show()
					}
					$("#scripttag").text(d.script);
					copyToClipboard(b)
				}
			})
		},
		onclose: function ()
		{
			$("#scripttag").text("");
			b.off();
			ZeroClipboard.destroy()
		}
	})
};
var copyToClipboard = function (c)
{
	var b = (window.ActiveXObject ||
		"ActiveXObject" in window);
	if (b)
	{
		c.on("click", function ()
		{
			var d = $("#scripttag").html();
			d = d.replace(/\&lt;/g, "<");
			d = d.replace(/\&gt;/g, ">");
			window.clipboardData.setData("Text",
				d);
			alert("스크립트가 클립보드에 복사되었습니다")
		})
	}
	else
	{
		ZeroClipboard.config(
		{
			moviePath: "/web/js/lib/ZeroClipboard.swf"
		});
		var a = new ZeroClipboard(c);
		a.on("load", function (d)
		{
			d.on("complete", function ()
			{
				alert("스크립트가 클립보드에 복사되었습니다")
			})
		})
	}
};
var validateCheckboxBeforeSubmit =
	function (b)
	{
		var a = false;
		var c = b.data.classname;
		var d = b.data.msg;
		$("." + c).each(function ()
		{
			if ($(this).prop("checked"))
			{
				a = true
			}
		});
		if (!a)
		{
			alert(d);
			b.preventDefault()
		}
};

function makeAlert(b)
{
	var d = b.message;
	var a = d + "\n\n";
	if (b.errorFields != null)
	{
		var c = b.errorFields;
		for (var e = 0; e < c.length; e++)
		{
			a += c[e];
			if (e != c.length - 1)
			{
				a += ", "
			}
		}
	}
	alert(a)
}
var Validate = {
	isNumber: function (a)
	{
		return /^[0-9]*$/.test(a)
	}
};
var bindEditName = function (c)
{
	$("tr").hover(function ()
	{
		$(this).addClass("bg_over")
	}, function ()
	{
		$(this).removeClass("bg_over")
	});
	$(".btn_edit").on("click", function ()
	{
		var d = $(this).nextAll(".box_edit");
		var e = d.find("input[name='name']");
		if (d.is(":visible"))
		{
			d.hide()
		}
		else
		{
			$(".box_edit").hide();
			d.show();
			e.focus();
			d.find(".txt_num").text(e.val() ? e
				.val().length : "0");
			e.keyup(function ()
			{
				var f = $(this).val().length;
				if (f <= 50)
				{
					d.find(".txt_num").text(f)
				}
			})
		}
	});
	$(".box_edit .btn_cancel").on("click",
		function ()
		{
			$(this).parent(".box_edit").hide();
			$(this).prevAll(".num_count").find(
				".txt_num").text("0")
		});

	function a(e, h, d, g)
	{
		var f = "checkTitle" + g;
		$("label[for='" + f + "']").find(
			"span.name").text(d);
		e.data("name", h.val());
		e.find(".txt_num").text("0");
		h.val("");
		$(".box_edit").hide()
	}

	function b(f, d, e)
	{
		c.find("input[name='name']").val(d);
		c.find("#itemId").val(f);
		c.find("input[name='appId']").val(e)
	}
	$(".box_edit .btn_save").on("click",
		function ()
		{
			var f = $(this).parent(".box_edit");
			var i = f.find("input[name='name']");
			var e = i.val();
			var j = f.data("itemid");
			var g = f.data("ordernum");
			var h = f.data("appid");
			b(j, e, h);
			var d = c.attr("action");
			$.ajax(
			{
				type: "post",
				url: d,
				data: c.serialize()
			}).done(function (k)
			{
				if (k.status == "SUCCESS")
				{
					a(f, i, e, g)
				}
				else
				{
					handleResponseAndPopup(k)
				}
			}).error(handleError)
		})
};
var handleResponseAndPopup = function (
	b, d)
{
	if ($("#ajax-loading").length)
	{
		$("#ajax-loading").hide()
	}
	var a = $.templates("#popup_template");
	var c = a.render(
	{
		status: b.status,
		message: b.message,
		errorFields: b.errorFields || "",
		redirectUrl: d || ""
	});
	$(c).popup("show")
};
var handleError = function (b, c, a)
{
	if ($("#ajax-loading").length)
	{
		$("#ajax-loading").hide()
	}
	if (b.status === 0)
	{
		alert(
			"네트워크에 연결되지 않았습니다. 네트워크 연결 후 다시 시도해 주세요."
		)
	}
	else
	{
		if (b.status == 404 || c == "404")
		{
			alert("페이지를 찾을 수 없습니다.")
		}
		else
		{
			if (b.status == 500 || c == "500")
			{
				alert("서비스가 불안정합니다. 나중에 다시 시도해주세요.")
			}
			else
			{
				if (b.status == 403 || c == "403")
				{
					alert("접근권한이 없습니다.")
				}
				else
				{
					if (b.status == 405 || c == "405")
					{
						alert("허용된 액션이 아닙니다.")
					}
					else
					{
						if (a === "timeout")
						{
							alert("응답시간이 오래 걸려 취소되었습니다.")
						}
						else
						{
							if (a === "abort")
							{
								alert("요청이 취소되었습니다.")
							}
							else
							{
								alert("알수 없는 오류가 발생하였습니다.\n" +
									a)
							}
						}
					}
				}
			}
		}
	}
};
$.fn.colorPalette = function (a)
{
	var e = a.onSelect || function (f) {};
	var d = ["#FFFFCC", "#FFFF66",
		"#FFCC66", "#F2984C", "#E1771E",
		"#B47B10", "#A9501B", "#6F3C1B",
		"#804000", "#CC0000", "#940F04",
		"#660000", "#C3D9FF", "#99C9FF",
		"#66B5FF", "#3D81EE", "#0066CC",
		"#6C82B5", "#32527A", "#2D6E89",
		"#006699", "#215670", "#003366",
		"#000033", "#CAF99B", "#80FF00",
		"#00FF80", "#78B749", "#2BA94F",
		"#38B63C", "#0D8F63", "#2D8930",
		"#1B703A", "#11593C", "#063E3F",
		"#002E3F", "#FFBBE8", "#E895CC",
		"#FF6FCF", "#C94093", "#9D1961",
		"#800040", "#800080", "#72179D",
		"#6728B2", "#6131BD", "#341473",
		"#40005B", "#FFFFFF", "#E6E6E6",
		"#CCCCCC", "#B3B3B3", "#999999",
		"#808080", "#7F7F7F", "#666666",
		"#4C4C4C", "#333333", "#191919",
		"#000000"
	];
	var c =
		'<ul class="box_color" style="overflow:hidden;position:absolute;border:1px solid #ccc;width:312px;height:130px;background-color:#ffffff;padding:10px;margin-left:70px;">';
	$(d).map(function (g, f)
	{
		c +=
			'<li style="width:26px;height:26px;float:left"><button style="display:block;width:25px;height:25px;margin:0 1px 1px 0;text-indent: -9999px;background-color:' +
			f +
			'" class="btn_color" type="button" value="' +
			f + '"/></li>'
	});
	c += "</ul>";
	$(".box_color").remove();
	var b = $(c);
	b.find("li").on("click", function (g)
	{
		var f = $(g.target).val();
		if (f)
		{
			e(f)
		}
	});
	$(this).append(b).on("click", function ()
	{
		b.toggle()
	});
	b.hide()
};
$.fn.controlDelBtnWithCheckbox =
	function ()
	{
		var c = $(this).find(
			".inp_comm:checkbox:not(.inp_all)");
		var b = $(this).find(
			".inp_all:checkbox");
		b.on("click", function ()
		{
			c.prop("checked", $(this).prop(
				"checked"));
			a()
		});
		c.on("change", a);

		function a()
		{
			var d = $("#delete_btn");
			if (c.is(":checked"))
			{
				d.removeAttr("disabled").removeClass(
					"disabled_btn")
			}
			else
			{
				d.prop("disabled", "disabled").addClass(
					"disabled_btn")
			}
		}
		a()
};